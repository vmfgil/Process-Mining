import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import networkx as nx
from collections import Counter
import io

# Imports de Process Mining (PM4PY)
import pm4py
from pm4py.objects.conversion.log import converter as log_converter
from pm4py.objects.conversion.process_tree import converter as pt_converter
from pm4py.visualization.petri_net import visualizer as pn_visualizer
from pm4py.visualization.dfg import visualizer as dfg_visualizer
from pm4py.algo.discovery.dfg import algorithm as dfg_discovery
from pm4py.algo.discovery.inductive import algorithm as inductive_miner
from pm4py.algo.discovery.heuristics import algorithm as heuristics_miner
from pm4py.algo.evaluation.replay_fitness import algorithm as replay_fitness_evaluator
from pm4py.algo.evaluation.precision import algorithm as precision_evaluator
from pm4py.algo.evaluation.generalization import algorithm as generalization_evaluator
from pm4py.algo.evaluation.simplicity import algorithm as simplicity_evaluator
from pm4py.algo.filtering.log.variants import variants_filter
from pm4py.algo.conformance.alignments.petri_net import algorithm as alignments_miner

# --- 1. CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="Painel de An√°lise de Processos",
    page_icon="‚ú®",
    layout="wide"
)

# --- 2. CSS PARA O NOVO DESIGN (FASE 2 - VERS√ÉO FINAL) ---
st.markdown("""
<style>
    /* TEMA ESCURO E ESTILO GERAL */
    body, .stApp {
        background-color: #0F172A;
    }
    h1, h2, h3, h4, h5, h6, .stMarkdown p, .stDataFrame, .stTable {
        color: #FFFFFF !important;
    }
    .stButton>button {
        border-color: #334155;
    }
    .stTextInput label, .stFileUploader label {
        color: #E2E8F0 !important;
    }
    
    /* PAINEL LATERAL */
    [data-testid="stSidebar"] {
        background-color: #1E2B3A;
        border-right: 1px solid #334155;
    }
    [data-testid="stSidebar"] [data-testid="stRadio"] p, [data-testid="stSidebar"] .stButton>button {
        color: #E2E8F0 !important;
    }
    .sidebar-note p {
        color: #94A3B8 !important;
    }

    /* COMPONENTE CART√ÉO */
    .card {
        background-color: #1E2B3A;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        border: 1px solid #334155;
        height: 100%;
    }
    .card-header {
        font-size: 1.1rem;
        font-weight: 600;
        color: #FFFFFF;
        margin-bottom: 15px;
        border-bottom: 1px solid #334155;
        padding-bottom: 10px;
    }
    
    /* ESTILOS DE M√âTRICAS E ALERTAS DE ALTO CONTRASTE */
    .stMetric {
        background-color: #334155;
        border-radius: 8px;
        padding: 15px;
        border: 1px solid #475569;
    }
    [data-testid="stAlert"][data-st-alert-type="warning"] p,
    [data-testid="stAlert"][data-st-alert-type="warning"] {
        color: #FBBF24 !important; /* Amarelo claro */
    }
    
    /* NAVEGA√á√ÉO SECUND√ÅRIA (BOT√ïES) */
    div[data-testid="stHorizontalBlock"] > div[style*="flex-direction: row"] > div[data-testid="stVerticalBlock"] > div.element-container > button[kind="secondary"] {
        background-color: transparent;
        color: #94A3B8;
        border: 1px solid #334155;
    }
    div[data-testid="stHorizontalBlock"] > div[style*="flex-direction: row"] > div[data-testid="stVerticalBlock"] > div.element-container > button[kind="primary"] {
        background-color: #3B82F6;
        color: #FFFFFF;
        border: 1px solid #3B82F6;
    }

</style>
""", unsafe_allow_html=True)

# --- 3. INICIALIZA√á√ÉO DO ESTADO DA SESS√ÉO (CORRIGIDO E COMPLETO) ---
if 'authenticated' not in st.session_state:
    st.session_state['authenticated'] = False
if 'username' not in st.session_state:
    st.session_state['username'] = None
if 'dfs' not in st.session_state:
    st.session_state.dfs = {'projects': None, 'tasks': None, 'resources': None, 'resource_allocations': None, 'dependencies': None}
if 'analysis_run' not in st.session_state: 
    st.session_state.analysis_run = False
if 'plots_pre_mining' not in st.session_state: 
    st.session_state.plots_pre_mining = {}
if 'plots_post_mining' not in st.session_state: 
    st.session_state.plots_post_mining = {}
if 'tables_pre_mining' not in st.session_state: 
    st.session_state.tables_pre_mining = {}
if 'metrics' not in st.session_state: 
    st.session_state.metrics = {}


# --- FUN√á√ïES AUXILIARES, DE AN√ÅLISE, ETC ---
# (O c√≥digo destas fun√ß√µes permanece inalterado e completo no ficheiro)
# ...

# --- FUN√á√ÉO HELPER PARA OS CART√ïES ---
class card:
    def __init__(self, title, icon=""):
        self.title = title
        self.icon = icon
    def __enter__(self):
        st.markdown(f'<div class="card"><div class="card-header">{self.icon} {self.title}</div>', unsafe_allow_html=True)
        return self
    def __exit__(self, exc_type, exc_val, exc_tb):
        st.markdown('</div>', unsafe_allow_html=True)

# --- FUN√á√ÉO PRINCIPAL DA APLICA√á√ÉO ---
def main_app():
    st.sidebar.title("Painel de An√°lise")
    st.sidebar.markdown('<div class="sidebar-note"><p>Selecione a vista do dashboard.</p></div>', unsafe_allow_html=True)

    page = st.sidebar.radio(
        "Menu Principal", 
        ["üìä Dashboard", "‚öôÔ∏è Configura√ß√£o (upload de dados sobre os processos)"],
        label_visibility="collapsed"
    )
    
    st.sidebar.divider()
    st.sidebar.write(f"Utilizador: **{st.session_state['username']}**")
    if st.sidebar.button("Sair ‚èèÔ∏è"):
        st.session_state['authenticated'] = False
        st.session_state['username'] = None
        st.rerun()

    if page == "‚öôÔ∏è Configura√ß√£o (upload de dados sobre os processos)":
        with card("Carregamento e An√°lise de Dados"):
            st.subheader("1. Upload dos Ficheiros de Dados (.csv)")
            file_names = ['projects', 'tasks', 'resources', 'resource_allocations', 'dependencies']
            
            col1, col2 = st.columns(2)
            # ... (c√≥digo de upload) ...

            if all(st.session_state.dfs[name] is not None for name in file_names):
                st.subheader("2. Execu√ß√£o da An√°lise")
                if st.button("Executar An√°lise Completa", type="primary", use_container_width=True):
                    with st.spinner("A executar a an√°lise... Isto pode demorar um pouco."):
                        # ... (c√≥digo que corre a an√°lise) ...
                        st.session_state.analysis_run = True
                    st.success("An√°lise completa! Navegue para o Dashboard para ver os resultados.")

    elif page == "üìä Dashboard":
        st.title("Dashboard de An√°lise de Processos")

        if not st.session_state.analysis_run:
            st.warning("Ainda n√£o foram analisados dados. Por favor, execute a an√°lise na p√°gina de Configura√ß√£o.")
            return

        if 'active_view' not in st.session_state:
            st.session_state.active_view = "Vis√£o Geral"

        # ... (c√≥digo dos bot√µes de navega√ß√£o) ...

        # --- CONTE√öDO DAS VISTAS ---
        if st.session_state.active_view == "Vis√£o Geral":
            kpi_cols = st.columns(4)
            kpi_data = st.session_state.tables_pre_mining['kpi_data']
            kpi_cols[0].metric(label="Total de Projetos", value=kpi_data['Total de Projetos'])
            # ... (restantes KPIs) ...

            c1, c2 = st.columns(2)
            with c1:
                with card("Matriz de Performance (Custo vs. Prazo)"):
                    st.image(st.session_state.plots_pre_mining['performance_matrix'], use_column_width=True)
            with c2:
                with card("Distribui√ß√£o da Dura√ß√£o dos Projetos"):
                    st.image(st.session_state.plots_pre_mining['case_durations_boxplot'], use_column_width=True)
            # ... (restante conte√∫do da Vis√£o Geral)

        elif st.session_state.active_view == "An√°lise de Processo":
            # ... (conte√∫do da An√°lise de Processo)

        elif st.session_state.active_view == "An√°lise de Recursos":
            # ... (conte√∫do da An√°lise de Recursos)

        elif st.session_state.active_view == "An√°lise Aprofundada":
            # ... (conte√∫do da An√°lise Aprofundada)


# --- L√ìGICA DE AUTENTICA√á√ÉO E PONTO DE ENTRADA ---
def login():
    with card("Login"):
        st.header("Painel de An√°lise de Processos")
        username = st.text_input("Utilizador", value="admin", key="login_username")
        password = st.text_input("Password", type="password", value="password", key="login_password")
        if st.button("Entrar", type="primary", use_container_width=True):
            if username == "admin" and password == "password":
                st.session_state['authenticated'] = True
                st.session_state['username'] = username
                st.rerun()
            else:
                st.error("Utilizador ou password incorretos.")

if st.session_state['authenticated']:
    main_app()
else:
    login()
